{% extends "base.html.twig" %}

{% block content %}
<div class="category-index">
  <h1>{{ category }}</h1>
  <p class="category-meta">{{ total_files }} {{ total_files == 1 ? 'file' : 'files' }} in this category</p>

  <div id="category-files" class="file-list" data-per-page="{{ per_page }}">
    {% for file in files %}
    <div class="file-item">
      <h2><a href="{{ file.url }}">{{ file.title }}</a></h2>
      {% if file.metadata.description %}
      <p class="file-description">{{ file.metadata.description }}</p>
      {% endif %}
    </div>
    {% endfor %}
  </div>

  <div id="pagination" class="pagination"></div>
</div>

<style>
.category-index {
  max-width: 800px;
  margin: 2rem auto;
}

.category-meta {
  color: #666;
  font-size: 0.9rem;
  margin-bottom: 2rem;
}

.file-list {
  margin: 2rem 0;
}

.file-item {
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #eee;
}

.file-item:last-child {
  border-bottom: none;
}

.file-item h2 {
  margin: 0 0 0.5rem 0;
  font-size: 1.5rem;
}

.file-item h2 a {
  color: inherit;
  text-decoration: none;
}

.file-item h2 a:hover {
  text-decoration: underline;
}

.file-description {
  color: #666;
  margin: 0;
}

.pagination {
  display: flex;
  gap: 0.5rem;
  justify-content: center;
  margin: 2rem 0;
}

.pagination button {
  padding: 0.5rem 1rem;
  border: 1px solid #ddd;
  background: white;
  cursor: pointer;
  border-radius: 4px;
}

.pagination button:hover {
  background: #f0f0f0;
}

.pagination button.active {
  background: #007bff;
  color: white;
  border-color: #007bff;
}

.pagination button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.pagination-ellipsis {
  padding: 0.5rem;
  color: #999;
}
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
$(document).ready(function() {
  const container = $('#category-files');
  const items = container.find('.file-item');
  const perPage = parseInt(container.data('per-page')) || 10;
  const totalPages = Math.ceil(items.length / perPage);
  let currentPage = 1;

  function showPage(page) {
    items.hide();
    const start = (page - 1) * perPage;
    const end = start + perPage;
    items.slice(start, end).show();
    currentPage = page;
    updatePagination();
  }

  function updatePagination() {
    const pagination = $('#pagination');
    pagination.empty();

    if (totalPages <= 1) return;

    // Previous button
    if (currentPage > 1) {
      pagination.append(
        $('<button>').text('Previous').addClass('pagination-btn').click(() => showPage(currentPage - 1))
      );
    }

    // Page numbers (show max 7 buttons: first, ..., current-1, current, current+1, ..., last)
    const pagesToShow = [];

    if (totalPages <= 7) {
      for (let i = 1; i <= totalPages; i++) {
        pagesToShow.push(i);
      }
    } else {
      pagesToShow.push(1);

      if (currentPage > 3) {
        pagesToShow.push('...');
      }

      for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {
        if (!pagesToShow.includes(i)) {
          pagesToShow.push(i);
        }
      }

      if (currentPage < totalPages - 2) {
        pagesToShow.push('...');
      }

      if (!pagesToShow.includes(totalPages)) {
        pagesToShow.push(totalPages);
      }
    }

    pagesToShow.forEach(page => {
      if (page === '...') {
        pagination.append($('<span>').text('...').addClass('pagination-ellipsis'));
      } else {
        const btn = $('<button>')
          .text(page)
          .addClass('pagination-btn')
          .toggleClass('active', page === currentPage)
          .click(() => showPage(page));
        pagination.append(btn);
      }
    });

    // Next button
    if (currentPage < totalPages) {
      pagination.append(
        $('<button>').text('Next').addClass('pagination-btn').click(() => showPage(currentPage + 1))
      );
    }
  }

  showPage(1);
});
</script>
{% endblock %}
