<?php

namespace EICC\StaticForge\Tests\Unit\Features\HtmlRenderer;

use EICC\StaticForge\Features\HtmlRenderer\Feature;
use EICC\StaticForge\Core\EventManager;
use EICC\Utils\Container;
use EICC\StaticForge\Tests\Unit\UnitTestCase;
use org\bovigo\vfs\vfsStream;
use org\bovigo\vfs\vfsStreamDirectory;

/**
 * @covers \EICC\StaticForge\Features\HtmlRenderer\Feature
 */
class FeatureTest extends UnitTestCase
{
    private Feature $feature;

    private EventManager $eventManager;
    private vfsStreamDirectory $root;
    private string $sourceDir;
    private string $outputDir;
    private string $templateDir;

    protected function setUp(): void
    {
        parent::setUp();

        // Set up virtual filesystem
        $this->root = vfsStream::setup('test');
        $this->sourceDir = $this->root->url() . '/source';
        $this->outputDir = $this->root->url() . '/output';

        // Create real temp directory for templates (Twig can't use vfsStream)
        $this->templateDir = sys_get_temp_dir() . '/staticforge_templates_' . uniqid();
        mkdir($this->templateDir . '/test', 0755, true);

        mkdir($this->sourceDir);
        mkdir($this->outputDir);

        // Set up container
        // Use bootstrapped container from parent::setUp()
        $this->setContainerVariable('SOURCE_DIR', $this->sourceDir);
        $this->setContainerVariable('OUTPUT_DIR', $this->outputDir);
        $this->setContainerVariable('TEMPLATE_DIR', $this->templateDir);
        $this->setContainerVariable('TEMPLATE', 'test');
        $this->setContainerVariable('SITE_NAME', 'Test Site');
        $this->setContainerVariable('SITE_BASE_URL', 'https://example.com/');

        // Logger already registered by bootstrap

        // Set up extension registry
        $extensionRegistry = new \EICC\StaticForge\Core\ExtensionRegistry($this->container);
        $this->addToContainer('extension_registry', $extensionRegistry);

        // Set up event manager
        $this->eventManager = new EventManager($this->container);

        // Create feature
        $this->feature = new Feature();
        $this->feature->register($this->eventManager, $this->container);

        // Create test templates
        $this->createTestTemplates();
    }

    public function testRegisterAddsHtmlExtension(): void
    {
        $extensionRegistry = $this->container->get('extension_registry');
        $this->assertTrue($extensionRegistry->isRegistered('.html'));
    }

    public function testHandleRenderIgnoresNonHtmlFiles(): void
    {
        $parameters = [
            'file_path' => '/test/file.txt',
            'file_info' => []
        ];

        $result = $this->feature->handleRender($this->container, $parameters);

        $this->assertEquals($parameters, $result);
        $this->assertArrayNotHasKey('processed', $result);
    }

    public function testHandleRenderProcessesHtmlFileWithoutYaml(): void
    {
        // Create test HTML file
        $htmlContent = '<h1>Test Page</h1><p>This is test content.</p>';
        $testFile = $this->sourceDir . '/test.html';
        file_put_contents($testFile, $htmlContent);

        $parameters = [
            'file_path' => $testFile,
            'file_info' => []
        ];

        $result = $this->feature->handleRender($this->container, $parameters);

        // Renderer should store rendered content, not write to disk
        $this->assertArrayHasKey('rendered_content', $result);
        $this->assertArrayHasKey('metadata', $result);
        $this->assertArrayHasKey('output_path', $result);
        $this->assertArrayHasKey('metadata', $result);
        $this->assertStringContainsString($this->outputDir . '/test.html', $result['output_path']);

        // Check rendered content contains expected elements
        $this->assertStringContainsString('<title>Untitled Page | Test Site</title>', $result['rendered_content']);
        $this->assertStringContainsString('<h1>Test Page</h1>', $result['rendered_content']);
        $this->assertStringContainsString('Generated by StaticForge', $result['rendered_content']);
    }

    public function testHandleRenderProcessesHtmlFileWithYaml(): void
    {
        // Create test HTML file with INI frontmatter
        $htmlContent = <<<HTML
<!-- INI
title = "My Test Page"
description = "A test page for StaticForge"
tags = "test, example"
category = "documentation"
-->
<h1>Welcome</h1>
<p>This is the main content.</p>
HTML;

        $testFile = $this->sourceDir . '/page.html';
        file_put_contents($testFile, $htmlContent);

        $parameters = [
            'file_path' => $testFile,
            'file_info' => []
        ];

        $result = $this->feature->handleRender($this->container, $parameters);

        $this->assertArrayHasKey('rendered_content', $result);
        $this->assertArrayHasKey('metadata', $result);

        // Check output file content
        $outputContent = $result['rendered_content'];
        $this->assertStringContainsString('<title>My Test Page | Test Site</title>', $outputContent);
        $this->assertStringContainsString('<meta name="description" content="A test page for StaticForge">', $outputContent);
        $this->assertStringContainsString('<meta name="keywords" content="test, example">', $outputContent);
        $this->assertStringContainsString('<h1>Welcome</h1>', $outputContent);
        $this->assertStringNotContainsString('---', $outputContent); // YAML removed
    }

    public function testHandleRenderCreatesOutputDirectories(): void
    {
        // Create nested directory structure
        mkdir($this->sourceDir . '/blog', 0755, true);

        $htmlContent = '<h1>Blog Post</h1>';
        $testFile = $this->sourceDir . '/blog/post.html';
        file_put_contents($testFile, $htmlContent);

        $parameters = [
            'file_path' => $testFile,
            'file_info' => []
        ];

        $result = $this->feature->handleRender($this->container, $parameters);

        $this->assertArrayHasKey('rendered_content', $result);
        $this->assertArrayHasKey('metadata', $result);
        // Core creates directories and writes files
        $this->assertStringContainsString('/blog/post.html', $result['output_path']);
    }

    public function testHandleRenderHandlesInvalidYaml(): void
    {
        // Create HTML file with invalid INI (note: INI format is more lenient)
        $htmlContent = <<<HTML
<!-- INI
title: Test
-->
<h1>Content</h1>
HTML;

        $testFile = $this->sourceDir . '/invalid.html';
        file_put_contents($testFile, $htmlContent);

        $parameters = [
            'file_path' => $testFile,
            'file_info' => []
        ];

        $result = $this->feature->handleRender($this->container, $parameters);

        $this->assertArrayHasKey('rendered_content', $result);
        $this->assertArrayHasKey('metadata', $result);

        // Should still process with default values
        $outputContent = $result['rendered_content'];
        $this->assertStringContainsString('<title>Untitled Page | Test Site</title>', $outputContent);
        $this->assertStringContainsString('<h1>Content</h1>', $outputContent);
    }

    public function testHandleRenderHandlesMissingParameters(): void
    {
        $parameters = [];

        $result = $this->feature->handleRender($this->container, $parameters);

        $this->assertEquals($parameters, $result);
        $this->assertArrayNotHasKey('processed', $result);
    }

    public function testHandleRenderHandlesReadError(): void
    {
        $parameters = [
            'file_path' => '/nonexistent/file.html',
            'file_info' => []
        ];

        $result = $this->feature->handleRender($this->container, $parameters);

        $this->assertArrayHasKey('error', $result);
        $this->assertArrayNotHasKey('processed', $result);
    }

    public function testTemplateReplacementWithAllVariables(): void
    {
        // Test all template variables using the bootstrapped container
        $this->setContainerVariable('SOURCE_DIR', $this->sourceDir);
        $this->setContainerVariable('OUTPUT_DIR', $this->outputDir);
        $this->setContainerVariable('SITE_NAME', 'My Amazing Site');
        $this->setContainerVariable('SITE_BASE_URL', 'https://mysite.com/');

        // Logger already registered by bootstrap

        // Set up extension registry
        $extensionRegistry = new \EICC\StaticForge\Core\ExtensionRegistry($this->container);
        $this->addToContainer('extension_registry', $extensionRegistry);

        // Set up event manager and register feature
        $eventManager = new EventManager($this->container);
        $feature = new Feature();
        $feature->register($eventManager, $this->container);

        $htmlContent = <<<HTML
<!-- INI
title = "Full Test Page"
description = "Complete test with all metadata"
tags = "complete, testing, metadata"
-->
<h1>Complete Test</h1>
<p>All variables should be replaced.</p>
HTML;

        $testFile = $this->sourceDir . '/complete.html';
        file_put_contents($testFile, $htmlContent);

        $parameters = [
            'file_path' => $testFile,
            'file_info' => []
        ];

        $result = $feature->handleRender($this->container, $parameters);

        $outputContent = $result['rendered_content'];

        $this->assertStringContainsString('<title>Full Test Page | My Amazing Site</title>', $outputContent);
        $this->assertStringContainsString('<meta name="description" content="Complete test with all metadata">', $outputContent);
        $this->assertStringContainsString('<meta name="keywords" content="complete, testing, metadata">', $outputContent);
        $this->assertStringContainsString('<base href="https://mysite.com/">', $outputContent);
        $this->assertStringContainsString('<h1>My Amazing Site</h1>', $outputContent);
        $this->assertStringContainsString('&copy; 2025 My Amazing Site', $outputContent);
    }

    protected function tearDown(): void
    {
        parent::tearDown();

        // Clean up template directory
        if (isset($this->templateDir) && is_dir($this->templateDir)) {
            $this->removeDirectory($this->templateDir);
        }
    }

    private function createTestTemplates(): void
    {
        // Base template with meta tags support matching HtmlRenderer template vars
        $baseTemplate = '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title | default("Untitled Page") }} | {{ site_name }}</title>
    {% if description %}<meta name="description" content="{{ description }}">{% endif %}
    {% if tags %}<meta name="keywords" content="{{ tags }}">{% endif %}
    {% if site_base_url %}<base href="{{ site_base_url }}">{% endif %}
</head>
<body>
    <header>
        <h1>{{ site_name }}</h1>
    </header>
    <main>
        {{ content | raw }}
    </main>
    <footer>
        <p>&copy; 2025 {{ site_name }}. Generated by StaticForge.</p>
    </footer>
</body>
</html>';
        file_put_contents($this->templateDir . '/test/base.html.twig', $baseTemplate);
    }

    private function removeDirectory(string $dir): void
    {
        if (!is_dir($dir)) {
            return;
        }

        $files = array_diff(scandir($dir), ['.', '..']);
        foreach ($files as $file) {
            $path = $dir . '/' . $file;
            is_dir($path) ? $this->removeDirectory($path) : unlink($path);
        }
        rmdir($dir);
    }
}
